var _modelJs = require('./model.js');
require('./config.js');
var _viewsAsteroidViewJs = require('./views/asteroidView.js');
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _viewsAsteroidViewJsDefault = _parcelHelpers.interopDefault(_viewsAsteroidViewJs);
var _viewsSearchViewJs = require('./views/searchView.js');
var _viewsSearchViewJsDefault = _parcelHelpers.interopDefault(_viewsSearchViewJs);
var _viewsResultsViewJs = require('./views/resultsView.js');
var _viewsResultsViewJsDefault = _parcelHelpers.interopDefault(_viewsResultsViewJs);
var _viewsPaginationViewJs = require('./views/paginationView.js');
var _viewsPaginationViewJsDefault = _parcelHelpers.interopDefault(_viewsPaginationViewJs);
var _viewsBookmarksViewJs = require('./views/bookmarksView.js');
var _viewsBookmarksViewJsDefault = _parcelHelpers.interopDefault(_viewsBookmarksViewJs);
require('core-js/stable');
require('regenerator-runtime/runtime');
require('regenerator-runtime');
const controlAsteroid = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;
    recipeView.renderSpinner();
    // 0) Update results view to mark selected search result
    _viewsResultsViewJsDefault.default.update(_modelJs.getSearchResultsPage());
    // 1) Updating bookmarks view
    _viewsBookmarksViewJsDefault.default.update(_modelJs.state.bookmarks);
    // 2) Loading Asteroid
    await _modelJs.loadAsteroid(id);
    console.log(_modelJs.loadAsteroid(id));
    // 3) Rendering Asteroid
    _viewsAsteroidViewJsDefault.default.render(_modelJs.state.asteroid);
  } catch (err) {
    recipeView.renderError();
    console.error(err);
  }
};
const controlSearchResults = async function () {
  try {
    _viewsResultsViewJsDefault.default.renderSpinner();
    // 1) Get search query
    const query = _viewsSearchViewJsDefault.default.getQuery();
    if (!query) return;
    // 2) Load search results
    await _modelJs.loadSearchResults(query);
    // 3) Render results
    _viewsResultsViewJsDefault.default.render(_modelJs.getSearchResultsPage());
    // 4) Render initial pagination buttons
    _viewsPaginationViewJsDefault.default.render(_modelJs.state.search);
  } catch (err) {
    console.log(err);
  }
};
const controlPagination = function (goToPage) {
  // 1) Render NEW results
  _viewsResultsViewJsDefault.default.render(_modelJs.getSearchResultsPage(goToPage));
  // 2) Render NEW pagination buttons
  _viewsPaginationViewJsDefault.default.render(_modelJs.state.search);
};
const controlAddBookmark = function () {
  // 1) Add/remove bookmark
  if (!_modelJs.state.recipe.bookmarked) _modelJs.addBookmark(_modelJs.state.recipe); else _modelJs.deleteBookmark(_modelJs.state.recipe.id);
  // 2) Update recipe view
  recipeView.update(_modelJs.state.recipe);
  // 3) Render bookmarks
  _viewsBookmarksViewJsDefault.default.render(_modelJs.state.bookmarks);
};
const controlBookmarks = function () {
  _viewsBookmarksViewJsDefault.default.render(_modelJs.state.bookmarks);
};
const init = function () {
  _viewsBookmarksViewJsDefault.default.addHandlerRender(controlBookmarks);
  recipeView.addHandlerRender(controlAsteroid);
  recipeView.addHandlerAddBookmark(controlAddBookmark);
  _viewsSearchViewJsDefault.default.addHandlerSearch(controlSearchResults);
  _viewsPaginationViewJsDefault.default.addHandlerClick(controlPagination);
};
init();
